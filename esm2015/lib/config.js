import { InjectionToken } from '@angular/core';
export const config = new InjectionToken('config');
export const NEW_CONFIG = new InjectionToken('NEW_CONFIG');
export const INITIAL_CONFIG = new InjectionToken('INITIAL_CONFIG');
export const initialConfig = {
    suffix: '',
    prefix: '',
    thousandSeparator: ' ',
    decimalMarker: '.',
    clearIfNotMatch: false,
    showTemplate: false,
    showMaskTyped: false,
    placeHolderCharacter: '_',
    dropSpecialCharacters: true,
    hiddenInput: undefined,
    shownMaskExpression: '',
    separatorLimit: '',
    allowNegativeNumbers: false,
    validation: true,
    // tslint:disable-next-line: quotemark
    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '"', "'"],
    leadZeroDateTime: false,
    patterns: {
        '0': {
            pattern: new RegExp('\\d'),
        },
        '9': {
            pattern: new RegExp('\\d'),
            optional: true,
        },
        X: {
            pattern: new RegExp('\\d'),
            symbol: '*',
        },
        A: {
            pattern: new RegExp('[a-zA-Z0-9]'),
        },
        S: {
            pattern: new RegExp('[a-zA-Z]'),
        },
        d: {
            pattern: new RegExp('\\d'),
        },
        m: {
            pattern: new RegExp('\\d'),
        },
        M: {
            pattern: new RegExp('\\d'),
        },
        H: {
            pattern: new RegExp('\\d'),
        },
        h: {
            pattern: new RegExp('\\d'),
        },
        s: {
            pattern: new RegExp('\\d'),
        },
    },
};
export const timeMasks = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];
export const withoutValidation = [
    'percent',
    'Hh',
    's0',
    'm0',
    'separator',
    'd0/M0/0000',
    'd0/M0',
    'd0',
    'M0',
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LW1hc2stbGliL3NyYy9saWIvY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUE2Qi9DLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBNEIsSUFBSSxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDNUUsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUE0QixJQUFJLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNwRixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQTRCLElBQUksY0FBYyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFFNUYsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFZO0lBQ3BDLE1BQU0sRUFBRSxFQUFFO0lBQ1YsTUFBTSxFQUFFLEVBQUU7SUFDVixpQkFBaUIsRUFBRSxHQUFHO0lBQ3RCLGFBQWEsRUFBRSxHQUFHO0lBQ2xCLGVBQWUsRUFBRSxLQUFLO0lBQ3RCLFlBQVksRUFBRSxLQUFLO0lBQ25CLGFBQWEsRUFBRSxLQUFLO0lBQ3BCLG9CQUFvQixFQUFFLEdBQUc7SUFDekIscUJBQXFCLEVBQUUsSUFBSTtJQUMzQixXQUFXLEVBQUUsU0FBUztJQUN0QixtQkFBbUIsRUFBRSxFQUFFO0lBQ3ZCLGNBQWMsRUFBRSxFQUFFO0lBQ2xCLG9CQUFvQixFQUFFLEtBQUs7SUFDM0IsVUFBVSxFQUFFLElBQUk7SUFDaEIsc0NBQXNDO0lBQ3RDLGlCQUFpQixFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUN6RixnQkFBZ0IsRUFBRSxLQUFLO0lBQ3ZCLFFBQVEsRUFBRTtRQUNSLEdBQUcsRUFBRTtZQUNILE9BQU8sRUFBRSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUM7U0FDM0I7UUFDRCxHQUFHLEVBQUU7WUFDSCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDO1lBQzFCLFFBQVEsRUFBRSxJQUFJO1NBQ2Y7UUFDRCxDQUFDLEVBQUU7WUFDRCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDO1lBQzFCLE1BQU0sRUFBRSxHQUFHO1NBQ1o7UUFDRCxDQUFDLEVBQUU7WUFDRCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDO1NBQ25DO1FBQ0QsQ0FBQyxFQUFFO1lBQ0QsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQztTQUNoQztRQUNELENBQUMsRUFBRTtZQUNELE9BQU8sRUFBRSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUM7U0FDM0I7UUFDRCxDQUFDLEVBQUU7WUFDRCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQzNCO1FBQ0QsQ0FBQyxFQUFFO1lBQ0QsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQztTQUMzQjtRQUNELENBQUMsRUFBRTtZQUNELE9BQU8sRUFBRSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUM7U0FDM0I7UUFDRCxDQUFDLEVBQUU7WUFDRCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQzNCO1FBQ0QsQ0FBQyxFQUFFO1lBQ0QsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQztTQUMzQjtLQUNGO0NBQ0YsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBYSxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFFbEUsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQWE7SUFDekMsU0FBUztJQUNULElBQUk7SUFDSixJQUFJO0lBQ0osSUFBSTtJQUNKLFdBQVc7SUFDWCxZQUFZO0lBQ1osT0FBTztJQUNQLElBQUk7SUFDSixJQUFJO0NBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElDb25maWcge1xyXG4gIHN1ZmZpeDogc3RyaW5nO1xyXG4gIHByZWZpeDogc3RyaW5nO1xyXG4gIHRob3VzYW5kU2VwYXJhdG9yOiBzdHJpbmc7XHJcbiAgZGVjaW1hbE1hcmtlcjogJy4nIHwgJywnO1xyXG4gIGNsZWFySWZOb3RNYXRjaDogYm9vbGVhbjtcclxuICBzaG93VGVtcGxhdGU6IGJvb2xlYW47XHJcbiAgc2hvd01hc2tUeXBlZDogYm9vbGVhbjtcclxuICBwbGFjZUhvbGRlckNoYXJhY3Rlcjogc3RyaW5nO1xyXG4gIHNob3duTWFza0V4cHJlc3Npb246IHN0cmluZztcclxuICBkcm9wU3BlY2lhbENoYXJhY3RlcnM6IGJvb2xlYW4gfCBzdHJpbmdbXTtcclxuICBzcGVjaWFsQ2hhcmFjdGVyczogc3RyaW5nW107XHJcbiAgaGlkZGVuSW5wdXQ6IGJvb2xlYW4gfCB1bmRlZmluZWQ7XHJcbiAgdmFsaWRhdGlvbjogYm9vbGVhbjtcclxuICBzZXBhcmF0b3JMaW1pdDogc3RyaW5nO1xyXG4gIGFsbG93TmVnYXRpdmVOdW1iZXJzOiBib29sZWFuO1xyXG4gIGxlYWRaZXJvRGF0ZVRpbWU6IGJvb2xlYW47XHJcbiAgcGF0dGVybnM6IHtcclxuICAgIFtjaGFyYWN0ZXI6IHN0cmluZ106IHtcclxuICAgICAgcGF0dGVybjogUmVnRXhwO1xyXG4gICAgICBvcHRpb25hbD86IGJvb2xlYW47XHJcbiAgICAgIHN5bWJvbD86IHN0cmluZztcclxuICAgIH07XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgb3B0aW9uc0NvbmZpZyA9IFBhcnRpYWw8SUNvbmZpZz47XHJcbmV4cG9ydCBjb25zdCBjb25maWc6IEluamVjdGlvblRva2VuPElDb25maWc+ID0gbmV3IEluamVjdGlvblRva2VuKCdjb25maWcnKTtcclxuZXhwb3J0IGNvbnN0IE5FV19DT05GSUc6IEluamVjdGlvblRva2VuPElDb25maWc+ID0gbmV3IEluamVjdGlvblRva2VuKCdORVdfQ09ORklHJyk7XHJcbmV4cG9ydCBjb25zdCBJTklUSUFMX0NPTkZJRzogSW5qZWN0aW9uVG9rZW48SUNvbmZpZz4gPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ0lOSVRJQUxfQ09ORklHJyk7XHJcblxyXG5leHBvcnQgY29uc3QgaW5pdGlhbENvbmZpZzogSUNvbmZpZyA9IHtcclxuICBzdWZmaXg6ICcnLFxyXG4gIHByZWZpeDogJycsXHJcbiAgdGhvdXNhbmRTZXBhcmF0b3I6ICcgJyxcclxuICBkZWNpbWFsTWFya2VyOiAnLicsXHJcbiAgY2xlYXJJZk5vdE1hdGNoOiBmYWxzZSxcclxuICBzaG93VGVtcGxhdGU6IGZhbHNlLFxyXG4gIHNob3dNYXNrVHlwZWQ6IGZhbHNlLFxyXG4gIHBsYWNlSG9sZGVyQ2hhcmFjdGVyOiAnXycsXHJcbiAgZHJvcFNwZWNpYWxDaGFyYWN0ZXJzOiB0cnVlLFxyXG4gIGhpZGRlbklucHV0OiB1bmRlZmluZWQsXHJcbiAgc2hvd25NYXNrRXhwcmVzc2lvbjogJycsXHJcbiAgc2VwYXJhdG9yTGltaXQ6ICcnLFxyXG4gIGFsbG93TmVnYXRpdmVOdW1iZXJzOiBmYWxzZSxcclxuICB2YWxpZGF0aW9uOiB0cnVlLFxyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogcXVvdGVtYXJrXHJcbiAgc3BlY2lhbENoYXJhY3RlcnM6IFsnLScsICcvJywgJygnLCAnKScsICcuJywgJzonLCAnICcsICcrJywgJywnLCAnQCcsICdbJywgJ10nLCAnXCInLCBcIidcIl0sXHJcbiAgbGVhZFplcm9EYXRlVGltZTogZmFsc2UsXHJcbiAgcGF0dGVybnM6IHtcclxuICAgICcwJzoge1xyXG4gICAgICBwYXR0ZXJuOiBuZXcgUmVnRXhwKCdcXFxcZCcpLFxyXG4gICAgfSxcclxuICAgICc5Jzoge1xyXG4gICAgICBwYXR0ZXJuOiBuZXcgUmVnRXhwKCdcXFxcZCcpLFxyXG4gICAgICBvcHRpb25hbDogdHJ1ZSxcclxuICAgIH0sXHJcbiAgICBYOiB7XHJcbiAgICAgIHBhdHRlcm46IG5ldyBSZWdFeHAoJ1xcXFxkJyksXHJcbiAgICAgIHN5bWJvbDogJyonLFxyXG4gICAgfSxcclxuICAgIEE6IHtcclxuICAgICAgcGF0dGVybjogbmV3IFJlZ0V4cCgnW2EtekEtWjAtOV0nKSxcclxuICAgIH0sXHJcbiAgICBTOiB7XHJcbiAgICAgIHBhdHRlcm46IG5ldyBSZWdFeHAoJ1thLXpBLVpdJyksXHJcbiAgICB9LFxyXG4gICAgZDoge1xyXG4gICAgICBwYXR0ZXJuOiBuZXcgUmVnRXhwKCdcXFxcZCcpLFxyXG4gICAgfSxcclxuICAgIG06IHtcclxuICAgICAgcGF0dGVybjogbmV3IFJlZ0V4cCgnXFxcXGQnKSxcclxuICAgIH0sXHJcbiAgICBNOiB7XHJcbiAgICAgIHBhdHRlcm46IG5ldyBSZWdFeHAoJ1xcXFxkJyksXHJcbiAgICB9LFxyXG4gICAgSDoge1xyXG4gICAgICBwYXR0ZXJuOiBuZXcgUmVnRXhwKCdcXFxcZCcpLFxyXG4gICAgfSxcclxuICAgIGg6IHtcclxuICAgICAgcGF0dGVybjogbmV3IFJlZ0V4cCgnXFxcXGQnKSxcclxuICAgIH0sXHJcbiAgICBzOiB7XHJcbiAgICAgIHBhdHRlcm46IG5ldyBSZWdFeHAoJ1xcXFxkJyksXHJcbiAgICB9LFxyXG4gIH0sXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgdGltZU1hc2tzOiBzdHJpbmdbXSA9IFsnSGg6bTA6czAnLCAnSGg6bTAnLCAnbTA6czAnXTtcclxuXHJcbmV4cG9ydCBjb25zdCB3aXRob3V0VmFsaWRhdGlvbjogc3RyaW5nW10gPSBbXHJcbiAgJ3BlcmNlbnQnLFxyXG4gICdIaCcsXHJcbiAgJ3MwJyxcclxuICAnbTAnLFxyXG4gICdzZXBhcmF0b3InLFxyXG4gICdkMC9NMC8wMDAwJyxcclxuICAnZDAvTTAnLFxyXG4gICdkMCcsXHJcbiAgJ00wJyxcclxuXTtcclxuIl19